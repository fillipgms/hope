generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole     @default(USER)
  accounts      Account[]
  cart          Cart?
  addresses     Address[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Cart {
  id        String @id @default(cuid())
  items     CartItem[]
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @unique
}

model CartItem {
  id        String @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  cartId    String
}

model Address {
  id        String @id @default(cuid())
  street    String
  city      String
  state     String
  zip       String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
}

model VerificationToken {
  id      String  @id @default(cuid())
  email   String
  token   String  @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String  @id @default(cuid())
  email   String
  token   String  @unique
  expires DateTime

  @@unique([email, token])
}

model Product {
  id              String @unique @id @default(cuid())
  name            String
  description       String
  price           String    // Alterado para usar um tipo numérico para preços
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String
  collection      Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId    String
  pictures        ProductPicture[]
  cartItem        CartItem[] 
}

model ProductPicture {
  id        String  @unique @id @default(cuid())
  url       String
  product   Product @relation(fields: [idProduct], references: [id], onDelete: Cascade)
  idProduct String
}

model Collection {
  id            String  @id @default(cuid())
  collectionName   String @unique
  products      Product[]
}

model Category {
  id              String  @id @default(cuid())
  categoryName   String @unique
  products        Product[]
}
