generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole     @default(USER)
  accounts      Account[]
  cart          Cart?
  Orders      Order[]
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Cart {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @unique  @db.ObjectId
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  cartId    String  @db.ObjectId
}

model VerificationToken {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String  @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String  @unique
  expires DateTime

  @@unique([email, token])
}

model Product { 
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  price           String
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String  @db.ObjectId
  collection      Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId    String  @db.ObjectId
  pictures        ProductPicture[]
  cartItem        CartItem[] 
  orderItem       OrderItem[]
}

model ProductPicture {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  product   Product @relation(fields: [idProduct], references: [id], onDelete: Cascade)
  idProduct String  @db.ObjectId
}

model Collection {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  collectionName   String @unique
  products      Product[]
}

model Category {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  categoryName   String @unique
  products        Product[]
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  OrderItem   OrderItem[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String
  total       String
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  productId   String  @db.ObjectId
  quantity    Int
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String  @db.ObjectId
}
